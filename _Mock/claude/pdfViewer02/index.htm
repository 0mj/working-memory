<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Viewer with Thumbnail Selection</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.min.js"></script>
    <style>
        body {
            display: flex;
            font-family: Arial, sans-serif;
        }
        #pdf-viewer {
            width: 70%;
            height: 100vh;
        }
        #thumbnails {
            width: 30%;
            height: 100vh;
            overflow-y: auto;
            padding: 10px;
            box-sizing: border-box;
        }
        .thumbnail {
            margin-bottom: 10px;
            cursor: pointer;
        }
        .thumbnail.selected {
            border: 2px solid blue;
        }
        #export-btn {
            position: fixed;
            top: 10px;
            right: 10px;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="pdf-viewer"></div>
    <div id="thumbnails"></div>
    <button id="export-btn">Export Selection</button>

    <script>
        // Set the workerSrc property before loading the PDF
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.worker.min.js';

        const pdfUrl = '2406.13138.pdf';
        let pdfDoc = null;
        const thumbnails = document.getElementById('thumbnails');
        const viewer = document.getElementById('pdf-viewer');
        const exportBtn = document.getElementById('export-btn');
        const selectedPages = new Set();

        pdfjsLib.getDocument(pdfUrl).promise.then(pdf => {
            pdfDoc = pdf;
            const numPages = pdf.numPages;

            for (let i = 1; i <= numPages; i++) {
                const thumbnail = document.createElement('div');
                thumbnail.classList.add('thumbnail');
                thumbnail.dataset.pageNum = i;
                thumbnail.innerHTML = `Page ${i}`;
                thumbnails.appendChild(thumbnail);

                pdf.getPage(i).then(page => {
                    const scale = 0.2;
                    const viewport = page.getViewport({ scale });
                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;

                    page.render({
                        canvasContext: context,
                        viewport: viewport
                    });

                    thumbnail.appendChild(canvas);
                });

                thumbnail.addEventListener('click', (e) => {
                    const pageNum = parseInt(e.currentTarget.dataset.pageNum);
                    if (e.ctrlKey || e.metaKey) {
                        if (selectedPages.has(pageNum)) {
                            selectedPages.delete(pageNum);
                            e.currentTarget.classList.remove('selected');
                        } else if (selectedPages.size < 4) {
                            selectedPages.add(pageNum);
                            e.currentTarget.classList.add('selected');
                        }
                    } else {
                        selectedPages.clear();
                        document.querySelectorAll('.thumbnail').forEach(t => t.classList.remove('selected'));
                        selectedPages.add(pageNum);
                        e.currentTarget.classList.add('selected');
                    }
                });
            }

            pdf.getPage(1).then(page => {
                const scale = 1.5;
                const viewport = page.getViewport({ scale });
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                viewer.appendChild(canvas);

                page.render({
                    canvasContext: context,
                    viewport: viewport
                });
            });
        });

        exportBtn.addEventListener('click', () => {
            if (selectedPages.size === 0) {
                alert('Please select at least one page to export.');
                return;
            }

            // In a real implementation, you would use a PDF manipulation library
            // to create a new PDF with the selected pages.
            // For this example, we'll just show an alert with the selected pages.
            alert(`Exporting pages: ${Array.from(selectedPages).join(', ')}`);
            // Prompt user to save the new PDF
            // This is a placeholder for the actual save functionality
            const dummyLink = document.createElement('a');
            dummyLink.href = 'data:application/pdf;base64,dummydata';
            dummyLink.download = 'selected_pages.pdf';
            dummyLink.click();
        });
    </script>
</body>
</html>